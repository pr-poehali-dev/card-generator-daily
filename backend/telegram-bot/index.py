'''
Business: Telegram bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–∫—Ä—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ webhook
Args: event - dict with httpMethod, body (Telegram webhook updates)
      context - object with attributes: request_id, function_name
Returns: HTTP response dict
'''

import json
import os
from typing import Dict, Any, Optional
import psycopg2
from psycopg2.extras import RealDictCursor
import urllib.request
import urllib.parse

def get_db_connection():
    return psycopg2.connect(os.environ['DATABASE_URL'])

def send_telegram_message(bot_token: str, chat_id: int, text: str, reply_markup: Optional[Dict] = None) -> bool:
    api_url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    params = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        params['reply_markup'] = json.dumps(reply_markup)
    
    try:
        data_encoded = urllib.parse.urlencode(params).encode('utf-8')
        req = urllib.request.Request(api_url, data=data_encoded)
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result.get('ok', False)
    except Exception as e:
        print(f'Failed to send message: {str(e)}')
        return False

def send_telegram_photo(bot_token: str, chat_id: int, photo_url: str, caption: str = '') -> bool:
    api_url = f'https://api.telegram.org/bot{bot_token}/sendPhoto'
    params = {
        'chat_id': chat_id,
        'photo': photo_url,
        'caption': caption,
        'parse_mode': 'HTML'
    }
    
    try:
        data_encoded = urllib.parse.urlencode(params).encode('utf-8')
        req = urllib.request.Request(api_url, data=data_encoded)
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result.get('ok', False)
    except Exception as e:
        print(f'Failed to send photo: {str(e)}')
        return False

def answer_callback_query(bot_token: str, callback_query_id: str, text: str, show_alert: bool = False) -> bool:
    api_url = f'https://api.telegram.org/bot{bot_token}/answerCallbackQuery'
    params = {
        'callback_query_id': callback_query_id,
        'text': text,
        'show_alert': show_alert
    }
    
    try:
        data_encoded = urllib.parse.urlencode(params).encode('utf-8')
        req = urllib.request.Request(api_url, data=data_encoded)
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode('utf-8'))
            return result.get('ok', False)
    except Exception:
        return False

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'TELEGRAM_BOT_TOKEN not configured'}),
            'isBase64Encoded': False
        }
    
    if method == 'POST':
        body_data = json.loads(event.get('body', '{}'))
        
        if 'message' in body_data:
            return handle_message(body_data['message'], bot_token)
        elif 'callback_query' in body_data:
            return handle_callback_query(body_data['callback_query'], bot_token)
        elif 'action' in body_data:
            return handle_api_action(body_data, bot_token)
    
    if method == 'GET':
        return get_subscribers_count()
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'ok': True}),
        'isBase64Encoded': False
    }

def handle_message(message: Dict[str, Any], bot_token: str) -> Dict[str, Any]:
    chat_id = message['chat']['id']
    text = message.get('text', '')
    username = message['from'].get('username', '')
    first_name = message['from'].get('first_name', '')
    
    if text == '/start':
        welcome_text = (
            f"üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{first_name}</b>!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–æ–∫ —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏.\n\n"
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
            "üåÖ –û—Ç–∫—Ä—ã—Ç–∫—É —Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º\n"
            "üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "üíù –¢–µ–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!"
        )
        
        keyboard = {
            'inline_keyboard': [[
                {'text': '‚ú® –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏', 'callback_data': 'subscribe'}
            ]]
        }
        
        send_telegram_message(bot_token, chat_id, welcome_text, keyboard)
    
    elif text == '/help':
        help_text = (
            "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )
        send_telegram_message(bot_token, chat_id, help_text)
    
    elif text == '/subscribe':
        subscribe_user_db(chat_id, username, first_name)
        success_text = (
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üíå\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unsubscribe"
        )
        send_telegram_message(bot_token, chat_id, success_text)
    
    elif text == '/unsubscribe':
        unsubscribe_user_db(chat_id)
        goodbye_text = (
            "üò¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /subscribe"
        )
        send_telegram_message(bot_token, chat_id, goodbye_text)
    
    elif text == '/status':
        is_subscribed = check_subscription_status(chat_id)
        if is_subscribed:
            status_text = "‚úÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üéâ"
        else:
            status_text = "‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"
        send_telegram_message(bot_token, chat_id, status_text)
    
    else:
        default_text = (
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòï\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )
        send_telegram_message(bot_token, chat_id, default_text)
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'ok': True}),
        'isBase64Encoded': False
    }

def handle_callback_query(callback_query: Dict[str, Any], bot_token: str) -> Dict[str, Any]:
    callback_id = callback_query['id']
    chat_id = callback_query['message']['chat']['id']
    data = callback_query['data']
    username = callback_query['from'].get('username', '')
    first_name = callback_query['from'].get('first_name', '')
    
    if data == 'subscribe':
        subscribe_user_db(chat_id, username, first_name)
        answer_callback_query(bot_token, callback_id, '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
        
        success_text = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "üå∏ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n"
            "üíå –ü–µ—Ä–≤–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ –ø—Ä–∏–¥–µ—Ç —É–∂–µ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe"
        )
        send_telegram_message(bot_token, chat_id, success_text)
    
    elif data == 'unsubscribe':
        unsubscribe_user_db(chat_id)
        answer_callback_query(bot_token, callback_id, 'üò¢ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        
        goodbye_text = (
            "üò¢ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "–ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /subscribe"
        )
        send_telegram_message(bot_token, chat_id, goodbye_text)
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'ok': True}),
        'isBase64Encoded': False
    }

def subscribe_user_db(chat_id: int, username: str, first_name: str):
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO telegram_subscribers (chat_id, username, first_name, is_active)
        VALUES (%s, %s, %s, true)
        ON CONFLICT (chat_id) 
        DO UPDATE SET is_active = true, username = EXCLUDED.username, first_name = EXCLUDED.first_name
    ''', (chat_id, username, first_name))
    
    conn.commit()
    cur.close()
    conn.close()

def unsubscribe_user_db(chat_id: int):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('UPDATE telegram_subscribers SET is_active = false WHERE chat_id = %s', (chat_id,))
    conn.commit()
    cur.close()
    conn.close()

def check_subscription_status(chat_id: int) -> bool:
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute('SELECT is_active FROM telegram_subscribers WHERE chat_id = %s', (chat_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result and result['is_active']

def handle_api_action(data: Dict[str, Any], bot_token: str) -> Dict[str, Any]:
    action = data.get('action')
    
    if action == 'send_daily_cards':
        return send_daily_cards(bot_token)
    
    return {
        'statusCode': 400,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'error': 'Unknown action'}),
        'isBase64Encoded': False
    }

def send_daily_cards(bot_token: str) -> Dict[str, Any]:
    from datetime import datetime
    
    today = datetime.now()
    date_str = f"{str(today.month).zfill(2)}-{str(today.day).zfill(2)}"
    
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM daily_cards WHERE date = %s', (date_str,))
    card = cur.fetchone()
    
    if not card:
        cur.close()
        conn.close()
        return {
            'statusCode': 404,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'No card for today'}),
            'isBase64Encoded': False
        }
    
    cur.execute('SELECT chat_id FROM telegram_subscribers WHERE is_active = true')
    subscribers = cur.fetchall()
    
    sent_count = 0
    failed_count = 0
    
    caption = f"<b>{card['title']}</b>\n\n{card['message']}"
    if card['is_holiday'] and card['holiday_name']:
        caption = f"üéâ <b>{card['holiday_name']}</b> üéâ\n\n{card['message']}"
    
    for subscriber in subscribers:
        chat_id = subscriber['chat_id']
        
        if send_telegram_photo(bot_token, chat_id, card['image_url'], caption):
            sent_count += 1
            cur.execute(
                'UPDATE telegram_subscribers SET last_sent_at = CURRENT_TIMESTAMP WHERE chat_id = %s',
                (chat_id,)
            )
        else:
            failed_count += 1
    
    conn.commit()
    cur.close()
    conn.close()
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({
            'success': True,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'card_title': card['title']
        }),
        'isBase64Encoded': False
    }

def get_subscribers_count() -> Dict[str, Any]:
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute('SELECT COUNT(*) as count FROM telegram_subscribers WHERE is_active = true')
    result = cur.fetchone()
    cur.close()
    conn.close()
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'body': json.dumps({'count': result['count']}),
        'isBase64Encoded': False
    }
